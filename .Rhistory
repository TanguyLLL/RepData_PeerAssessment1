baltimore2<- filter(totalData, fips == "24510")
LA<- filter(totalData, fips == "06037")
bothCities<- rbind(baltimore2, LA)
plot6<- ggplot(bothCities, aes(factor(year), Emissions, fill = year))+ geom_bar(stat = "identity")+ facet_grid(.~ bothCities$fips)
ggsave("plot6.png")
rm(list = ls())
library(swirl)
swirl()
swirl()
dim(pm0)
head(pm0)
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
rm(list = ls())
library(datasets)
library(kernlab)
data("spam")
set.seed(3435)
trainIndicator<- rbinom(4601,1, prob = 0.5)
trainSpam<- spam[trainIndicator == 1,]
testSpam<- spam[trainIndicator == 0,]
str(trainSpam, n =5)
str(trainSpam, 5)
summary(trainSpam)
table(trainSpam$type)
plot(trainSpam$capitalAve ~ trainSpam$type)
plot(log10(trainSpam$capitalAve) ~ trainSpam$type)
plot(log10(trainSpam$capitalAve + 1) ~ trainSpam$type)
plot(log10(trainSpam[, 1:4]+1))
hclust<- hclust(dist(trainSpam[, 1:57]))
hcluster<- hclust(dist(trainSpam[, 1:57]))
rm(hclust)
plot(hcluster)
hcluster<- hclust(dist(t(trainSpam[, 1:57])))
plot(hcluster)
?t
ptam<- t(spam)
View(ptam)
rm(ptam)
trainSpam$capitalAve
log10(trainSpam$capitalAve)
scale(trainSpam$capitalAve)
log10(trainSpam$capitalAve)
hclusterUpdated<- hclust(dist(t(log10(trainSpam[, 1:55]+1))))
plot(hclusterUpdated)
hclusterUpdated<- hclust(dist(t(scale(trainSpam[, 1:55]+1))))
plot(hclusterUpdated)
hclusterUpdated<- hclust(dist(t(log10(trainSpam[, 1:55]+1))))
plot(hclusterUpdated)
library(ggplot2)
rm(list = ls())
dat<- read.csv("testt.csv")
View(dat)
names(dat$Provider.City)
unique(dat$Provider.City)
grep("NEW YORK", dat)
unique(dat$Provider.State)
library(dplyr)
library(dplyr)
library(ggplot2)
dat<- read.csv("payments.csv")
library(dplyr)
library(ggplot2)
dat<- read.csv("payments.csv")
datNY<- filter(dat, Provider.State == "NY")
plot1<- ggplot(datNY, aes(datNY$Average.Covered.Charges, Average.Total.Payments))
qplot(datNY, aes(datNY$Average.Covered.Charges, Average.Total.Payments))
plot(datNY, aes(datNY$Average.Covered.Charges, Average.Total.Payments))
str(datNY)
plot(datNY$Average.Covered.Charges, datNY$Average.Total.Payments)
plot1<- ggplot(datNY, aes(datNY$Average.Covered.Charges, Average.Total.Payments))+ geom_jitter()
plot1
plot1<- ggplot(datNY, aes(datNY$Average.Covered.Charges, Average.Total.Payments, fill = Average.Total.Payments ))+ geom_jitter()
plot1
plot1<- ggplot(datNY, aes(datNY$Average.Covered.Charges, Average.Total.Payments, fill = Average.Covered.Charges ))+ geom_jitter()
plot1
plot1<- ggplot(datNY, aes(datNY$Average.Covered.Charges, Average.Total.Payments, fill = "Average.Covered.Charges" ))+ geom_jitter()
plot1
plot1<- ggplot(datNY, aes(datNY$Average.Covered.Charges, Average.Total.Payments, fill = datNY$Average.Covered.Charges ))+ geom_jitter()
plot1
plot1<- ggplot(datNY, aes(datNY$Average.Covered.Charges, Average.Total.Payments, fill = "blue" ))+ geom_jitter()
plot1
plot1<- ggplot(datNY, aes(datNY$Average.Covered.Charges, Average.Total.Payments, color = "blue" ))+ geom_jitter()
plot1
plot1<- ggplot(datNY, aes(datNY$Average.Covered.Charges, Average.Total.Payments, color = "blue", alpha = 1/5 ))+ geom_jitter()
plot1
plot1<- ggplot(datNY, aes(datNY$Average.Covered.Charges, Average.Total.Payments, color = "blue", alpha = 1/10 ))+ geom_jitter()
plot1
plot1<- ggplot(datNY, aes(datNY$Average.Covered.Charges, Average.Total.Payments, color = blue, alpha = 1/10 ))+ geom_jitter()
plot1
plot1<- ggplot(datNY, aes(datNY$Average.Covered.Charges, Average.Total.Payments, color = "green", alpha = 1/10 ))+ geom_jitter()
plot1
?color
plot1<- ggplot(datNY, aes(datNY$Average.Covered.Charges, Average.Total.Payments, colour = "green", alpha = 1/10 ))+ geom_jitter()
?color
plot1
plot1<- ggplot(datNY, aes(datNY$Average.Covered.Charges, Average.Total.Payments, fill = "green", alpha = 1/10 ))+ geom_jitter()
plot1
plot1<- ggplot(datNY, aes(datNY$Average.Covered.Charges, Average.Total.Payments, fill = "blue", alpha = 1/10 ))+ geom_jitter()
plot1
plot1<- ggplot(datNY, aes(datNY$Average.Covered.Charges, Average.Total.Payments))+ geom_jitter(aes(fill= "blue"))
plot1
plot1<- ggplot(datNY, aes(datNY$Average.Covered.Charges, Average.Total.Payments))+ geom_jitter(aes(fill= "green"))
plot1
plot1<- ggplot(datNY, aes(datNY$Average.Covered.Charges, Average.Total.Payments))+ geom_jitter(aes(fill= "green", aplha = 1/10))
plot1<- ggplot(datNY, aes(datNY$Average.Covered.Charges, Average.Total.Payments))+ geom_jitter()
plot1<- ggplot(datNY, aes(datNY$Average.Covered.Charges, Average.Total.Payments))
plot1 + geom_jitter(aes(fill = "red"))
plot1 + geom_jitter(aes(fill = "blue"))
plot1 + geom_jitter(aes(alpha = 1/10)
)
plot1 + geom_jitter(aes(alpha = 1/100))
plot1 + geom_jitter(aes(fill = "red", alpha = 1/10)
)
plot1 + geom_jitter(aes(fill = red, alpha = 1/10))
plot1<- ggplot(datNY, aes(Average.Covered.Charges, Average.Total.Payments))
plot1 + geom_jitter(alpha= 1/10, color= 5, fill = 5)
plot1 + geom_jitter(alpha= 1/10, color= 10, fill = 5)
plot1 + geom_jitter(alpha= 1/10, color= 2, fill = 5)
plot1 + geom_jitter(alpha= 1/10, color= 45, fill = 5)
plot1 + geom_jitter(alpha= 1/10, color= 12, fill = 5)
plot1 + geom_jitter(alpha= 1/10, color= 12, fill = 12)
plot1 + geom_jitter(alpha= 1/10, color= 12)
plot1 + geom_jitter(alpha= 1/10, color= 12, shape = 4)
plot1 + geom_jitter(alpha= 1/10, color= 12, shape = 8)
plot1 + geom_jitter(alpha= 1/10, color= 12, shape = 2)
plot1 + geom_jitter(alpha= 1/10, color= 12, shape = 1)
plot1 + geom_jitter(alpha= 1/10, color= 12, shape = 3)
plot1 + geom_jitter(alpha= 1/10, color= 12, shape = 5)
plot1 + geom_jitter(alpha= 1/10, color= 12, shape = 6)
plot1 + geom_jitter(alpha= 1/10, color= 12, fill =1)
plot1 + geom_jitter(alpha= 1/10, color= 12, fill =10)
plot1 + geom_jitter(alpha= 1/10, color= 12, fill =100)
plot1 + geom_jitter(alpha= 1/10, color= 12, fill =1)
plot1 + geom_jitter(alpha= 1/10, color= 12, fill =1/10)
plot1 + geom_jitter(alpha= 1/10, color= 12, size = 5)
plot1 + geom_jitter(alpha= 1/10, color= 12, size = 2)
plot1 + geom_jitter(alpha= 1/10, color= 12, size = 3)
plot1 + geom_jitter(alpha= 1/10, color= 12, size = 2)
plot1 + geom_jitter(alpha= 1/10, color= 12, size = 2) + geom_smooth(model = lm)
plot1 + geom_jitter(alpha= 1/10, color= 12, size = 2) + geom_smooth(method =  lm)
plot1 + geom_jitter(alpha= 1/10, color= 12, size = 2) + geom_smooth(method =  "lm")
?geom_smooth
plot1 + geom_jitter(alpha= 1/10, color= 12, size = 2) + geom_smooth()
plot1 + geom_jitter(alpha= 1/10, color= 12, size = 2) + geom_smooth(method = 'loess')
library(dplyr)
library(ggplot2)
dat<- read.csv("payments.csv")
datNY<- filter(dat, Provider.State == "NY")
plot1<- ggplot(datNY, aes(Average.Covered.Charges, Average.Total.Payments))
plot1 + geom_jitter(alpha= 1/10, color= 12, size = 2) + geom_smooth(method = 'loess')
library(dplyr)
library(ggplot2)
dat<- read.csv("payments.csv")
datNY<- filter(dat, Provider.State == "NY")
plot1<- ggplot(datNY, aes(Average.Covered.Charges, Average.Total.Payments))
plot1 + geom_jitter(alpha= 1/10, color= 12, size = 2) + geom_smooth(method = 'loess')
pdf("plot1.pdf")
plot2<- ggplot(dat, aes(Average.Covered.Charges, Average.Total.Payments) )
plot2 + geom_jitter(alpha= 1/10, color= 12, size = 2)
plot2 + geom_jitter(alpha= 1/10, color= 12, size = 2) + geom_smooth(method = 'loess')
plot2 + geom_jitter(alpha= 1/10, color= 12, size = 2) + geom_smooth(method = 'loess') + facet_grid(dat$DRG.Definition ~ dat$Provider.State)
library(dplyr)
library(ggplot2)
dat<- read.csv("payments.csv")
datNY<- filter(dat, Provider.State == "NY")
plot1<- ggplot(datNY, aes(Average.Covered.Charges, Average.Total.Payments)geom_jitter(alpha= 1/10, color= 12, size = 2) + geom_smooth(method = 'loess'))
library(dplyr)
library(ggplot2)
dat<- read.csv("payments.csv")
datNY<- filter(dat, Provider.State == "NY")
plot1<- ggplot(datNY, aes(Average.Covered.Charges, Average.Total.Payments)+ geom_jitter(alpha= 1/10, color= 12, size = 2) + geom_smooth(method = 'loess'))
library(dplyr)
library(ggplot2)
dat<- read.csv("payments.csv")
datNY<- filter(dat, Provider.State == "NY")
plot1<- ggplot(datNY, aes(Average.Covered.Charges, Average.Total.Payments)
plot1 + geom_jitter(alpha= 1/10, color= 12, size = 2) + geom_smooth(method = 'loess')
library(dplyr)
library(ggplot2)
dat<- read.csv("payments.csv")
datNY<- filter(dat, Provider.State == "NY")
plot1<- ggplot(datNY, aes(Average.Covered.Charges, Average.Total.Payments))
plot1 + geom_jitter(alpha= 1/10, color= 12, size = 2) + geom_smooth(method = 'loess')
plot1<- ggplot(datNY, aes(Average.Covered.Charges, Average.Total.Payments))
plot1 <- plot1 + geom_jitter(alpha= 1/10, color= 12, size = 2) + geom_smooth(method = 'loess')
plot1 <- plot1 + geom_jitter(alpha= 1/10, color= 12, size = 2) + geom_smooth(method = 'loess')
pdf(plot1, "plot1.pdf")
plot1
plot2 + geom_jitter(alpha= 1/10, color= 12, size = 2) + geom_smooth(method = 'loess') + facet_grid(dat$DRG.Definition ~ dat$Provider.State)
plot2 + geom_jitter(alpha= 1/10, color= 12, size = 2) + geom_smooth(method = 'loess') + facet_grid(dat$DRG.Definition ~ dat$Provider.State)
plot1 <- plot1 + geom_jitter(alpha= 1/10, color= 12, size = 2) + geom_smooth(method = 'loess')
pdf(plot1, "plot1.pdf")
?pdf
dat<- read.csv("payments.csv")
datNY<- filter(dat, Provider.State == "NY")
plot1<- ggplot(datNY, aes(Average.Covered.Charges, Average.Total.Payments))
plot1 <- plot1 + geom_jitter(alpha= 1/10, color= 12, size = 2) + geom_smooth(method = 'loess')
pdf(plot1, "plot1.pdf")
dev.off()
plot1<- ggplot(datNY, aes(Average.Covered.Charges, Average.Total.Payments))
pdf("plot1.pdf")
plot1 <- plot1 + geom_jitter(alpha= 1/10, color= 12, size = 2) + geom_smooth(method = 'loess')
dev.off()
datNY<- filter(dat, Provider.State == "NY")
plot1<- ggplot(datNY, aes(Average.Covered.Charges, Average.Total.Payments))
plot1 <- plot1 + geom_jitter(alpha= 1/10, color= 12, size = 2) + geom_smooth(method = 'loess')
ggsave("plot1.pdf", plot = plot1, device = "pdf")
library(dplyr)
library(ggplot2)
dat<- read.csv("payments.csv")
datNY<- filter(dat, Provider.State == "NY")
plot1<- ggplot(datNY, aes(Average.Covered.Charges, Average.Total.Payments))
plot1 <- plot1 + geom_jitter(alpha= 1/10, color= 12, size = 2) + geom_smooth(method = 'loess')
ggsave("plot1.pdf", plot = plot1, device = "pdf")
plot2<- ggplot(dat, aes(Average.Covered.Charges, Average.Total.Payments) )
plot2<- plot2 + geom_jitter(alpha= 1/10, color= 12, size = 2) + geom_smooth(method = 'loess') + facet_grid(dat$DRG.Definition ~ dat$Provider.State)
ggsave("plot2.pdf", plot = plot2, device = "pdf")
plot2 + geom_jitter(alpha= 1/10, color= 12, size = 2) + geom_smooth(method = 'loess') + facet_grid(dat$DRG.Definition
)
rm(list = ls())
install.packages("Matrix")
library(markdown)
*coucou*
print(*coucou*)
library(knitr)
title: "Untitled"
```
library(datasets)
aze<- mtcars
summary(mtcars)
pairs(mtcars)
library(datasets)
aze<- mtcars
summary(mtcars)
pairs(mtcars)
```{r test, echo= FALSE}
install.packages("xtable")
opts_chunk$set(echo = TRUE)
First bit of code changes the options so that the code will always be available
# Peer Assessement
## This is where the enthusiastic student I am starts ro learn R markdown.final version
# to see the plots, please be sure to read this in the correct html editor !
First bit of code changes the options so that the code will always be available
in the markdown document.
```{r setOptions, echo=TRUE}
library(knitr)
opts_chunk$set(echo = TRUE)
```
###1. Code for reading in the dataset and/or processing the data
```{r}
actiData<- read.csv("activity.csv")
actiData$date<- as.Date(actiData$date, "%Y-%m-%d ")
```
###2. Histogram of the total number of steps taken each day
```{r}
library(ggplot2)
graph1<- ggplot(actiData, aes(date, steps, ))
graph1+ geom_bar(stat = "identity", na.rm = TRUE, fill = "dodgerblue4")
```
###3.Mean and median number of steps taken each day
```{r}
library(dplyr)
actiDataDay<- group_by(actiData,date)
results <-summarise(actiDataDay, meanS = mean(steps, na.rm = TRUE), medianS = median(steps, na.rm = TRUE) )
print(results, n = 20)
maxMean<- which.max(results$meanS)
maxMedian<- which.max(results$medianS)
```
The maximum mean is ` maxMean `. Du to a lot of "0", most medians are "0" and the biggest median is `maxMedian`
### 4.Time series plot of the average number of steps taken
```{r}
plot(results$date, results$meanS, col= "red")
```
###3.The 5-minute interval that, on average, contains the maximum number of steps
```{r}
actiDataInterval<- group_by(actiData, interval)
actiDataInterval<- summarise(actiDataInterval, meansteps =mean(steps, na.rm = TRUE))
# That interval is interval found on line :
which.max(actiDataInterval$meansteps)
```
###6.Code to describe and show a strategy for imputing missing data
```{r}
#Calculate and report the total number of missing values in the dataset (i.e. the total number of rows with NAs)
sum(is.na(actiData))
#Devise a strategy for filling in all of the missing values in the dataset + Create a new dataset that is equal to the original dataset but with the missing data filled in
```{r}
meantot<- mean(actiData$steps, na.rm = T)
actiData$newSteps <- actiData$steps
actiData$newSteps[is.na(actiData$newSteps)]<- meantot
```
### 7. Histogram of the total number of steps taken each day after missing values are imputed
```{r}
tempoDat<- aggregate(steps ~ date, actiData, sum)
hist(tempoDat$steps)
```
### 8.Panel plot comparing the average number of steps taken per 5-minute interval across weekdays and weekends
```{r}
actiData<- mutate(actiData, Day = weekdays(actiData$date))
actiData<- mutate(actiData, weekend= ifelse(actiData$Day == c("Saturday", "Sunday"), "weekend", "week"))
tempoDat2 <- group_by(actiData, interval, weekend)
tempoDat2<- summarise(tempoDat2, mean(steps, na.rm = TRUE))
graph2<- ggplot(tempoDat2, aes(interval, `mean(steps, na.rm = TRUE)`, color = weekend))
graph2 + geom_bar(stat = "identity") + facet_grid(.~ tempoDat2$weekend)
```{r}
# Peer Assessement
## This is where the enthusiastic student I am starts ro learn R markdown.final version
# to see the plots, please be sure to read this in the correct html editor !
First bit of code changes the options so that the code will always be available
in the markdown document.
```{r setOptions, echo=TRUE}
library(knitr)
opts_chunk$set(echo = TRUE)
```
###1. Code for reading in the dataset and/or processing the data
```{r}
actiData<- read.csv("activity.csv")
actiData$date<- as.Date(actiData$date, "%Y-%m-%d ")
```
###2. Histogram of the total number of steps taken each day
```{r}
library(ggplot2)
graph1<- ggplot(actiData, aes(date, steps, ))
graph1+ geom_bar(stat = "identity", na.rm = TRUE, fill = "dodgerblue4")
```
###3.Mean and median number of steps taken each day
```{r}
library(dplyr)
actiDataDay<- group_by(actiData,date)
results <-summarise(actiDataDay, meanS = mean(steps, na.rm = TRUE), medianS = median(steps, na.rm = TRUE) )
print(results, n = 20)
maxMean<- which.max(results$meanS)
maxMedian<- which.max(results$medianS)
```
The maximum mean is ` maxMean `. Du to a lot of "0", most medians are "0" and the biggest median is `maxMedian`
### 4.Time series plot of the average number of steps taken
```{r}
plot(results$date, results$meanS, col= "red")
```
###3.The 5-minute interval that, on average, contains the maximum number of steps
```{r}
actiDataInterval<- group_by(actiData, interval)
actiDataInterval<- summarise(actiDataInterval, meansteps =mean(steps, na.rm = TRUE))
# That interval is interval found on line :
which.max(actiDataInterval$meansteps)
```
###6.Code to describe and show a strategy for imputing missing data
```{r}
#Calculate and report the total number of missing values in the dataset (i.e. the total number of rows with NAs)
sum(is.na(actiData))
#Devise a strategy for filling in all of the missing values in the dataset + Create a new dataset that is equal to the original dataset but with the missing data filled in
```{r}
meantot<- mean(actiData$steps, na.rm = T)
actiData$newSteps <- actiData$steps
actiData$newSteps[is.na(actiData$newSteps)]<- meantot
```
### 7. Histogram of the total number of steps taken each day after missing values are imputed
```{r}
tempoDat<- aggregate(steps ~ date, actiData, sum)
hist(tempoDat$steps)
```
### 8.Panel plot comparing the average number of steps taken per 5-minute interval across weekdays and weekends
```{r}
actiData<- mutate(actiData, Day = weekdays(actiData$date))
actiData<- mutate(actiData, weekend= ifelse(actiData$Day == c("Saturday", "Sunday"), "weekend", "week"))
tempoDat2 <- group_by(actiData, interval, weekend)
tempoDat2<- summarise(tempoDat2, mean(steps, na.rm = TRUE))
graph2<- ggplot(tempoDat2, aes(interval, `mean(steps, na.rm = TRUE)`, color = weekend))
graph2 + geom_bar(stat = "identity") + facet_grid(.~ tempoDat2$weekend)
```
```{r setOptions, echo=TRUE}
library(knitr)
opts_chunk$set(echo = TRUE)
actiData<- read.csv("activity.csv")
actiData$date<- as.Date(actiData$date, "%Y-%m-%d ")
actiData<- read.csv("activity.csv")
actiData$date<- as.Date(actiData$date, "%Y-%m-%d ")
actiData<- read.csv("activity.csv")
getwd()
dir()
setwd("ReproR")
getwd()
getwd()
dir()
setwd("RepData_PeerAssessment1")
dir
dir()
actiData<- read.csv("activity.csv")
# Peer Assessement
## This is where the enthusiastic student I am starts ro learn R markdown.final version
# to see the plots, please be sure to read this in the correct html editor !
First bit of code changes the options so that the code will always be available
in the markdown document.
```{r setOptions, echo=TRUE}
library(knitr)
opts_chunk$set(echo = TRUE)
```
###1. Code for reading in the dataset and/or processing the data
```{r}
actiData<- read.csv("activity.csv")
actiData$date<- as.Date(actiData$date, "%Y-%m-%d ")
```
###2. Histogram of the total number of steps taken each day
```{r}
library(ggplot2)
graph1<- ggplot(actiData, aes(date, steps, ))
graph1+ geom_bar(stat = "identity", na.rm = TRUE, fill = "dodgerblue4")
```
###3.Mean and median number of steps taken each day
```{r}
library(dplyr)
actiDataDay<- group_by(actiData,date)
results <-summarise(actiDataDay, meanS = mean(steps, na.rm = TRUE), medianS = median(steps, na.rm = TRUE) )
print(results, n = 20)
maxMean<- which.max(results$meanS)
maxMedian<- which.max(results$medianS)
```
The maximum mean is ` maxMean `. Du to a lot of "0", most medians are "0" and the biggest median is `maxMedian`
### 4.Time series plot of the average number of steps taken
```{r}
plot(results$date, results$meanS, col= "red")
```
###3.The 5-minute interval that, on average, contains the maximum number of steps
```{r}
actiDataInterval<- group_by(actiData, interval)
actiDataInterval<- summarise(actiDataInterval, meansteps =mean(steps, na.rm = TRUE))
# That interval is interval found on line :
which.max(actiDataInterval$meansteps)
```
###6.Code to describe and show a strategy for imputing missing data
```{r}
#Calculate and report the total number of missing values in the dataset (i.e. the total number of rows with NAs)
sum(is.na(actiData))
#Devise a strategy for filling in all of the missing values in the dataset + Create a new dataset that is equal to the original dataset but with the missing data filled in
```{r}
meantot<- mean(actiData$steps, na.rm = T)
actiData$newSteps <- actiData$steps
actiData$newSteps[is.na(actiData$newSteps)]<- meantot
```
### 7. Histogram of the total number of steps taken each day after missing values are imputed
```{r}
tempoDat<- aggregate(steps ~ date, actiData, sum)
hist(tempoDat$steps)
```
### 8.Panel plot comparing the average number of steps taken per 5-minute interval across weekdays and weekends
```{r}
actiData<- mutate(actiData, Day = weekdays(actiData$date))
actiData<- mutate(actiData, weekend= ifelse(actiData$Day == c("Saturday", "Sunday"), "weekend", "week"))
tempoDat2 <- group_by(actiData, interval, weekend)
tempoDat2<- summarise(tempoDat2, mean(steps, na.rm = TRUE))
graph2<- ggplot(tempoDat2, aes(interval, `mean(steps, na.rm = TRUE)`, color = weekend))
graph2 + geom_bar(stat = "identity") + facet_grid(.~ tempoDat2$weekend)
```
library(markdown)
